Category<-c("Alpha","Beta","Zeta")
City<-c("Hong Kong","London","Nairobi")
my_dat<-expand_grid(Category,City)
set.seed(84684)
my_dat$Value<-sample(1:10,9,replace=T)
my_dat %>% ggplot(aes(Category, Value, fill = City)) + geom_col(position = 'identity')
my_dat %>% ggplot(aes(Category, Value, fill = City)) + geom_col(position = 'identity') + transition_states(City)
library(gganimate)
library(gifski)
library(gganimate)
library(gifski)
my_dat %>% ggplot(aes(Category, Value, fill = City)) + geom_col(position = 'identity') + transition_states(City)
anim_1 <- my_dat %>% ggplot(aes(Category, Value, fill = City)) + geom_col(position = 'identity') + transition_states(City) + enter_fade() + exit_fade()
anim_1
#####DO NOT MODIFY THIS CHUNK
Response<-c("Energize","Amazing","Great")
set.seed(9819)
Energize<-tibble(Company=rep("Energize",100),Output=rnorm(100,50,20))
set.seed(9819)
Amazing<-tibble(Company=rep("Amazing",100),Output=rnorm(100,50,10))
set.seed(9819)
Great<-tibble(Company=rep("Great",100),Output=rnorm(100,40,5))
my_dat<-bind_rows(Energize,Amazing,Great)
library(plotly)
###PUT YOUR ggplotly() figure here. It will compile in the R Markdown report.
p <- my_dat %>% ggplot(aes(Company, Output, fill = Company)) + geom_boxplot()
p
fig
library(plotly)
p <- my_dat %>% ggplot(aes(Company, Output, fill = Company)) + geom_boxplot()
fig <- plotly(p)
fig
# Chunk 1: problem_1_data
#####DO NOT MODIFY THIS CHUNK
library(tidyverse)
Category<-c("Alpha","Beta","Zeta")
City<-c("Hong Kong","London","Nairobi")
my_dat<-expand_grid(Category,City)
set.seed(84684)
my_dat$Value<-sample(1:10,9,replace=T)
# Chunk 2: problem_1_solution
library(gganimate)
library(gifski)
anim_1 <- my_dat %>% ggplot(aes(Category, Value, fill = City)) + geom_col(position = 'identity') + transition_states(City) + enter_fade() + exit_fade()
anim_1
# Chunk 3: problem_2_data
#####DO NOT MODIFY THIS CHUNK
Response<-c("Energize","Amazing","Great")
set.seed(9819)
Energize<-tibble(Company=rep("Energize",100),Output=rnorm(100,50,20))
set.seed(9819)
Amazing<-tibble(Company=rep("Amazing",100),Output=rnorm(100,50,10))
set.seed(9819)
Great<-tibble(Company=rep("Great",100),Output=rnorm(100,40,5))
my_dat<-bind_rows(Energize,Amazing,Great)
# Chunk 4: problem_2_solution
library(plotly)
p <- my_dat %>% ggplot(aes(Company, Output, fill = Company)) + geom_boxplot()
fig <- ggplotly(p)
fig
# Chunk 5: problem_3_data
library(plotly)
Category<-seq(from=1,to=10)
Time<-seq(from=1,to=10)
dat3<-expand_grid(Category,Time)
set.seed(78957)
dat3$Quantity<-runif(100,0,10)
# Chunk 6: problem_3_solution
library(plotly)
###PUT YOUR ggplotly() figure here. It will compile in the R Markdown report.
library(plotly)
Category<-seq(from=1,to=10)
Time<-seq(from=1,to=10)
dat3<-expand_grid(Category,Time)
set.seed(78957)
dat3$Quantity<-runif(100,0,10)
library(plotly)
Category<-seq(from=1,to=10)
Time<-seq(from=1,to=10)
dat3<-expand_grid(Category,Time)
set.seed(78957)
dat3$Quantity<-runif(100,0,10)
p3 <- dat3 %>% ggplot(aes(Category, Quantity)) + geom_segment(aes(xend = Quantity, yend = 0)) + geom_point()
p3
library(plotly)
p3 <- dat3 %>% ggplot(aes(Category, Quantity, group = Time)) + geom_segment(aes(xend = Quantity, yend = 0)) + geom_point()
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(xend = Quantity, yend = 0)) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(xend = Quantity), yend = 0) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(yend = Quantity), xend = 0) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(xend = Category, yend = Quantity)) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(xend = 0, yend = Quantity)) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(yend = 0, xend = Quantity)) + geom_point())
p3
library(plotly)
p3 <- ggplotly(ggplot(dat3, aes(Category, Quantity, frame = Time)) + geom_segment(aes(x = Category, y = 0, xend = Category, yend = Quantity)) + geom_point())
p3
quit()
quit()
quit()
exp(−0,684282)
exp(−0.684282)
d <- 0.01
m <- 2
p <- 0.055
d <- 0.01
(m * p * (1+d)) / (1+d -p)
2 * 0.055 * 1.01
1 + d - p
0.1111 / 0.955
0.055 ^ 1/12
(1 - 0.055)^12
2 * 0.5072029 * 1.01
p <- 0.5072029
1 + d - p
1.02455 / 0.5027971
p <- 1 - 0.055
(m * p * (1+d)) / (1+d -p)
194 / 207
active_cust=c(1000,
631,
468,
382,
326,
289,
262,
241,
223,
207,
194)
cbind(0:10,active_cust)
S=active_cust/active_cust[1]
t=seq(2,11)
r=S[t]/S[t-1]
r[10]
S[11]
S
quit()
library(tidyverse)
quit()
shiny::runApp('C:/Users/meren/OneDrive/Masaüstü/R_Working_Directory/custom_shiny_app/shiny_practice/module_2')
runApp('C:/Users/meren/OneDrive/Masaüstü/R_Working_Directory/custom_shiny_app/shiny_practice/module_2')
quit()
library(shiny); runApp('C:/Users/meren/OneDrive/Masaüstü/R_Working_Directory/custom_shiny_app/shiny_practice/module_2/module_2.R')
quit()
library(flexdashboard)
library(tidyverse)
library(plotly)
library(shiny)
dat<-read_csv(url("https://www.dropbox.com/s/4ebgnkdhhxo5rac/cel_volden_wiseman%20_coursera.csv?raw=1"))
dat$Party<-recode(dat$dem,`1`="Democrat",`0`="Republican")
#######HINT: for Chart D, you'll need to set the height of the renderPlot, using the height argument. Try a value of 750.
#####some data management functions are already included. You need to add the visualization functions.
dat %>%
drop_na() %>%
filter(year>1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, all_pass, fill = Party)) +
geom_density(col = c('Red', 'Blue'))
dat %>%
drop_na() %>%
filter(year>1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_density(col = c('Red', 'Blue'))
library(janitor)
library(ggthemes)
library(extrafont)
loadfonts()
cel <- cel %>% mutate(power = case_when(
power == '0' ~ 'Not Powerful',
power == '1' ~ 'Powerful')) %>% clean_names()
cel %>% group_by(power) %>% summarize(mean_ranking_powerful = mean(rank_in_party)) %>% ggplot(aes(power, mean_ranking_powerful, fill = power)) +
geom_col() +
geom_text(
aes(label = round(mean_ranking_powerful, 1)),
vjust = 3,
col = 'white',
size = 4,
fontface = 'bold'
) +
labs(
x = 'Power within the Party',
y = 'Mean Rank within Party',
title = 'The Relationship of Power to the Mean Rank within the Party',
caption = 'Question: Is power variable decided through mean ranking in the party?'
) +
guides(fill = FALSE) +
theme_few() +
scale_fill_few('Medium') +
theme(
panel.border = element_blank(),
text = element_text(family = "Lucida Sans Unicode")
) +
annotate(
"rect",
ymin = 100,
ymax = 107,
xmin = 0.95,
xmax = 1.05,
alpha = 0.2,
fill = 'gray100'
) +
annotate(
"rect",
ymin = 108,
ymax = 115,
xmin = 1.95,
xmax = 2.05,
alpha = 0.2,
fill = "gray100")
######DO NOT MODIFY. This will load required packages and data.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
cces <- drop_na(read_csv(url("https://www.dropbox.com/s/ahmt12y39unicd2/cces_sample_coursera.csv?raw=1")))
cel <- drop_na(read_csv(url("https://www.dropbox.com/s/4ebgnkdhhxo5rac/cel_volden_wiseman%20_coursera.csv?raw=1")))
library(janitor)
library(ggthemes)
library(extrafont)
loadfonts()
cel <- cel %>% mutate(power = case_when(
power == '0' ~ 'Not Powerful',
power == '1' ~ 'Powerful')) %>% clean_names()
cel %>% group_by(power) %>% summarize(mean_ranking_powerful = mean(rank_in_party)) %>% ggplot(aes(power, mean_ranking_powerful, fill = power)) +
geom_col() +
geom_text(
aes(label = round(mean_ranking_powerful, 1)),
vjust = 3,
col = 'white',
size = 4,
fontface = 'bold'
) +
labs(
x = 'Power within the Party',
y = 'Mean Rank within Party',
title = 'The Relationship of Power to the Mean Rank within the Party',
caption = 'Question: Is power variable decided through mean ranking in the party?'
) +
guides(fill = FALSE) +
theme_few() +
scale_fill_few('Medium') +
theme(
panel.border = element_blank(),
text = element_text(family = "Lucida Sans Unicode")
) +
annotate(
"rect",
ymin = 100,
ymax = 107,
xmin = 0.95,
xmax = 1.05,
alpha = 0.2,
fill = 'gray100'
) +
annotate(
"rect",
ymin = 108,
ymax = 115,
xmin = 1.95,
xmax = 2.05,
alpha = 0.2,
fill = "gray100")
library(ggthemes)
cel_2 <- cel %>% group_by(year) %>% summarize(sum_all_bills_year = sum(all_bills)) %>% ungroup()
sum_min <- cel_2$year[which.min(cel_2$sum_all_bills_year)]
min_year_data <- cel_2 %>% filter(year == sum_min)
ggplot(cel_2, aes(year, sum_all_bills_year)) +
geom_line(
linewidth = 1,
color = 'purple4'
) +
scale_color_stata() +
geom_text(
data = min_year_data,
aes(
label = str_c(
sum_min, ' - ', min_year_data$sum_all_bills_year, ' bills proposed'
),
family = "Lucida Sans Unicode"
),
vjust = -0.5,
hjust = -0.4,
size = 3.4
) +
geom_segment(
aes(
x = 1995,
y = 4212,
xend = 1998,
yend = 4500
),
arrow = arrow(
type = "closed",
length = unit(0.1, "inches")
),
lineend = "round",
linejoin = "round",
color = "darkblue",
size = 0.5
) +
theme_bw() +
theme(
text = element_text(
family = "Lucida Sans Unicode"
)
) +
annotate(
"rect",
ymin = 4200,
ymax = 4700,
xmin = 1998,
xmax = 2009,
alpha = 0.2,
fill = '#FFCCFF',
color = 'black'
) +
labs(x = 'Years',
y = 'Sum. of All Bills',
title = 'Yearly change of Bills Suggested')
dat_select <- dat %>% select(educ, edloan, employ, CC18_308a)
dat_select
dat <- drop_na(read_csv(url("https://www.dropbox.com/s/uhfstf6g36ghxwp/cces_sample_coursera.csv?raw=1")))
dat_select <- dat %>% select(educ, edloan, employ, CC18_308a)
dat_select <- dat_select %>% mutate(trump_approve_disapprove = recode(CC18_308a, '1' = 1, '2' = 1,
dat_select <- dat_select %>% mutate(trump_approve_disapprove = recode(CC18_308a, '1' = 1, '2' = 1,
'3' = 0, '4' = 0))
dat %>%
drop_na() %>%
filter(year>1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_area(col = c('Red', 'Blue'))
dat %>%
drop_na() %>%
filter(year > 1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_area(col = c('Red', 'Blue'))
library(flexdashboard)
library(tidyverse)
library(plotly)
library(shiny)
dat<-read_csv(url("https://www.dropbox.com/s/4ebgnkdhhxo5rac/cel_volden_wiseman%20_coursera.csv?raw=1"))
dat$Party<-recode(dat$dem,`1`="Democrat",`0`="Republican")
#######HINT: for Chart D, you'll need to set the height of the renderPlot, using the height argument. Try a value of 750.
#####some data management functions are already included. You need to add the visualization functions.
dat %>%
drop_na() %>%
filter(year > 1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_area() +
scale_fill_manual(values = c('Red', 'Blue'))
dat %>%
drop_na() %>%
filter(year > 1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_area() +
scale_fill_manual(values = c('Blue', 'Red'))
dat %>%
drop_na() %>%
filter(year > 1979) %>%
group_by(year,Party) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(year, passed, fill = Party)) +
geom_area() +
scale_fill_manual(values = c('Blue', 'Red')) +
labs(x = 'Year', y = 'All Bills Passed', title = 'Number of Bills Passed Since 1980')
dat%>%
drop_na()%>%
filter(congress==110) %>%
plotly(ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "lm"))
dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "lm") %>%
plotly::ggplotly()
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "lm")
ggplotly(p)
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "glm")
ggplotly(p)
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "loess")
ggplotly(p)
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party)) +
geom_point() +
geom_smooth(method = "loess")
ggplotly(p)
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party, col = Party)) +
geom_point() +
geom_smooth(method = "loess")
ggplotly(p)
p <- dat %>%
drop_na() %>%
filter(congress == 110) %>%
ggplot(aes(votepct, all_pass, group = Party, col = Party)) +
geom_point() +
geom_smooth(method = "loess") +
scale_color_manual(values = c('Blue', 'Red'))
ggplotly(p)
p2 <- dat%>%
drop_na()%>%
filter(congress==110) %>%
ggplot(aes(dwnom1, all_pass, group = Party, col = Party) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c('Blue', 'Red'))
ggplotlty(p2)
p2 <- dat%>%
drop_na()%>%
filter(congress==110) %>%
ggplot(aes(dwnom1, all_pass, group = Party, col = Party) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c('Blue', 'Red'))
p2 <- dat%>%
drop_na()%>%
filter(congress==110) %>%
ggplot(aes(dwnom1, all_pass, group = Party, col = Party)) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c('Blue', 'Red'))
ggplotlty(p2)
p2 <- dat%>%
drop_na()%>%
filter(congress==110) %>%
ggplot(aes(dwnom1, all_pass, group = Party, col = Party)) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c('Blue', 'Red'))
ggplotly(p2)
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) + ggplot(state.abb, passed) +
geom_col() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) + ggplot(aes(state.abb, passed)) +
geom_col() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(state.abb, passed)) +
geom_col() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(state.abb, passed)) +
geom_bar() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(state.name, passed)) +
geom_bar() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(st_name, passed)) +
geom_bar() + coord_flip()
####hint: this figure uses selectInput with the multiple option set to true and with the options set up so that all states are initially selected.
dat %>%
group_by(st_name) %>%
filter(congress==110) %>%
summarise(passed=sum(all_pass)) %>% ggplot(aes(st_name, passed)) +
geom_col() + coord_flip()
selectInput('state_abb', label = 'State', choices = dat$st_name)
selectInput('state_abb', label = 'State', choices = unique(dat$st_name), multiple = T, selected = unique(dat$st_name))
quit()
setwd("C:/Users/meren/OneDrive/Masaüstü/R_Working_Directory/ggplot/final_project")
